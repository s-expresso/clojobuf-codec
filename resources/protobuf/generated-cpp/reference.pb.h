// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reference.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_reference_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_reference_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_reference_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_reference_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_reference_2eproto;
class Packed;
class PackedDefaultTypeInternal;
extern PackedDefaultTypeInternal _Packed_default_instance_;
class Singular;
class SingularDefaultTypeInternal;
extern SingularDefaultTypeInternal _Singular_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Packed* Arena::CreateMaybeMessage<::Packed>(Arena*);
template<> ::Singular* Arena::CreateMaybeMessage<::Singular>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Enum : int {
  MINUS_ONE = -1,
  ZERO = 0,
  ONE = 1,
  TWO = 2,
  THREE = 3,
  FOUR = 4,
  FIVE = 5
};
bool Enum_IsValid(int value);
constexpr Enum Enum_MIN = MINUS_ONE;
constexpr Enum Enum_MAX = FIVE;
constexpr int Enum_ARRAYSIZE = Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enum_descriptor();
template<typename T>
inline const std::string& Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Enum_descriptor(), enum_t_value);
}
inline bool Enum_Parse(
    const std::string& name, Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Enum>(
    Enum_descriptor(), name, value);
}
// ===================================================================

class Singular PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Singular) */ {
 public:
  inline Singular() : Singular(nullptr) {};
  virtual ~Singular();

  Singular(const Singular& from);
  Singular(Singular&& from) noexcept
    : Singular() {
    *this = ::std::move(from);
  }

  inline Singular& operator=(const Singular& from) {
    CopyFrom(from);
    return *this;
  }
  inline Singular& operator=(Singular&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Singular& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Singular* internal_default_instance() {
    return reinterpret_cast<const Singular*>(
               &_Singular_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Singular& a, Singular& b) {
    a.Swap(&b);
  }
  inline void Swap(Singular* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Singular* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Singular* New() const final {
    return CreateMaybeMessage<Singular>(nullptr);
  }

  Singular* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Singular>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Singular& from);
  void MergeFrom(const Singular& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Singular* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Singular";
  }
  protected:
  explicit Singular(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reference_2eproto);
    return ::descriptor_table_reference_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValFieldNumber = 12,
    kBytesValFieldNumber = 13,
    kInt64ValFieldNumber = 2,
    kInt32ValFieldNumber = 1,
    kUint32ValFieldNumber = 3,
    kUint64ValFieldNumber = 4,
    kSint64ValFieldNumber = 6,
    kSint32ValFieldNumber = 5,
    kBoolValFieldNumber = 7,
    kFixed64ValFieldNumber = 9,
    kSfixed64ValFieldNumber = 10,
    kDoubleValFieldNumber = 11,
    kFixed32ValFieldNumber = 14,
    kSfixed32ValFieldNumber = 15,
    kFloatValFieldNumber = 16,
    kEnumValFieldNumber = 8,
  };
  // optional string string_val = 12;
  bool has_string_val() const;
  private:
  bool _internal_has_string_val() const;
  public:
  void clear_string_val();
  const std::string& string_val() const;
  void set_string_val(const std::string& value);
  void set_string_val(std::string&& value);
  void set_string_val(const char* value);
  void set_string_val(const char* value, size_t size);
  std::string* mutable_string_val();
  std::string* release_string_val();
  void set_allocated_string_val(std::string* string_val);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string_val();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string_val(
      std::string* string_val);
  private:
  const std::string& _internal_string_val() const;
  void _internal_set_string_val(const std::string& value);
  std::string* _internal_mutable_string_val();
  public:

  // optional bytes bytes_val = 13;
  bool has_bytes_val() const;
  private:
  bool _internal_has_bytes_val() const;
  public:
  void clear_bytes_val();
  const std::string& bytes_val() const;
  void set_bytes_val(const std::string& value);
  void set_bytes_val(std::string&& value);
  void set_bytes_val(const char* value);
  void set_bytes_val(const void* value, size_t size);
  std::string* mutable_bytes_val();
  std::string* release_bytes_val();
  void set_allocated_bytes_val(std::string* bytes_val);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bytes_val();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bytes_val(
      std::string* bytes_val);
  private:
  const std::string& _internal_bytes_val() const;
  void _internal_set_bytes_val(const std::string& value);
  std::string* _internal_mutable_bytes_val();
  public:

  // optional int64 int64_val = 2;
  bool has_int64_val() const;
  private:
  bool _internal_has_int64_val() const;
  public:
  void clear_int64_val();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_val() const;
  void set_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_val() const;
  void _internal_set_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 int32_val = 1;
  bool has_int32_val() const;
  private:
  bool _internal_has_int32_val() const;
  public:
  void clear_int32_val();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_val() const;
  void set_int32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_val() const;
  void _internal_set_int32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 uint32_val = 3;
  bool has_uint32_val() const;
  private:
  bool _internal_has_uint32_val() const;
  public:
  void clear_uint32_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_val() const;
  void set_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_val() const;
  void _internal_set_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 uint64_val = 4;
  bool has_uint64_val() const;
  private:
  bool _internal_has_uint64_val() const;
  public:
  void clear_uint64_val();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_val() const;
  void set_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_val() const;
  void _internal_set_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional sint64 sint64_val = 6;
  bool has_sint64_val() const;
  private:
  bool _internal_has_sint64_val() const;
  public:
  void clear_sint64_val();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_val() const;
  void set_sint64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64_val() const;
  void _internal_set_sint64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional sint32 sint32_val = 5;
  bool has_sint32_val() const;
  private:
  bool _internal_has_sint32_val() const;
  public:
  void clear_sint32_val();
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_val() const;
  void set_sint32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32_val() const;
  void _internal_set_sint32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool bool_val = 7;
  bool has_bool_val() const;
  private:
  bool _internal_has_bool_val() const;
  public:
  void clear_bool_val();
  bool bool_val() const;
  void set_bool_val(bool value);
  private:
  bool _internal_bool_val() const;
  void _internal_set_bool_val(bool value);
  public:

  // optional fixed64 fixed64_val = 9;
  bool has_fixed64_val() const;
  private:
  bool _internal_has_fixed64_val() const;
  public:
  void clear_fixed64_val();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_val() const;
  void set_fixed64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64_val() const;
  void _internal_set_fixed64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional sfixed64 sfixed64_val = 10;
  bool has_sfixed64_val() const;
  private:
  bool _internal_has_sfixed64_val() const;
  public:
  void clear_sfixed64_val();
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_val() const;
  void set_sfixed64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64_val() const;
  void _internal_set_sfixed64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double double_val = 11;
  bool has_double_val() const;
  private:
  bool _internal_has_double_val() const;
  public:
  void clear_double_val();
  double double_val() const;
  void set_double_val(double value);
  private:
  double _internal_double_val() const;
  void _internal_set_double_val(double value);
  public:

  // optional fixed32 fixed32_val = 14;
  bool has_fixed32_val() const;
  private:
  bool _internal_has_fixed32_val() const;
  public:
  void clear_fixed32_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_val() const;
  void set_fixed32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32_val() const;
  void _internal_set_fixed32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sfixed32 sfixed32_val = 15;
  bool has_sfixed32_val() const;
  private:
  bool _internal_has_sfixed32_val() const;
  public:
  void clear_sfixed32_val();
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_val() const;
  void set_sfixed32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32_val() const;
  void _internal_set_sfixed32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float float_val = 16;
  bool has_float_val() const;
  private:
  bool _internal_has_float_val() const;
  public:
  void clear_float_val();
  float float_val() const;
  void set_float_val(float value);
  private:
  float _internal_float_val() const;
  void _internal_set_float_val(float value);
  public:

  // optional .Enum enum_val = 8;
  bool has_enum_val() const;
  private:
  bool _internal_has_enum_val() const;
  public:
  void clear_enum_val();
  ::Enum enum_val() const;
  void set_enum_val(::Enum value);
  private:
  ::Enum _internal_enum_val() const;
  void _internal_set_enum_val(::Enum value);
  public:

  // @@protoc_insertion_point(class_scope:Singular)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_val_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_val_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_val_;
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_val_;
  bool bool_val_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_val_;
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_val_;
  double double_val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_val_;
  float float_val_;
  int enum_val_;
  friend struct ::TableStruct_reference_2eproto;
};
// -------------------------------------------------------------------

class Packed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packed) */ {
 public:
  inline Packed() : Packed(nullptr) {};
  virtual ~Packed();

  Packed(const Packed& from);
  Packed(Packed&& from) noexcept
    : Packed() {
    *this = ::std::move(from);
  }

  inline Packed& operator=(const Packed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packed& operator=(Packed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packed* internal_default_instance() {
    return reinterpret_cast<const Packed*>(
               &_Packed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Packed& a, Packed& b) {
    a.Swap(&b);
  }
  inline void Swap(Packed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packed* New() const final {
    return CreateMaybeMessage<Packed>(nullptr);
  }

  Packed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packed& from);
  void MergeFrom(const Packed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packed";
  }
  protected:
  explicit Packed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_reference_2eproto);
    return ::descriptor_table_reference_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInt32ValFieldNumber = 1,
    kInt64ValFieldNumber = 2,
    kUint32ValFieldNumber = 3,
    kUint64ValFieldNumber = 4,
    kSint32ValFieldNumber = 5,
    kSint64ValFieldNumber = 6,
    kBoolValFieldNumber = 7,
    kEnumValFieldNumber = 8,
    kFixed64ValFieldNumber = 9,
    kSfixed64ValFieldNumber = 10,
    kDoubleValFieldNumber = 11,
    kStringValFieldNumber = 12,
    kBytesValFieldNumber = 13,
    kFixed32ValFieldNumber = 14,
    kSfixed32ValFieldNumber = 15,
    kFloatValFieldNumber = 16,
  };
  // repeated int32 int32_val = 1 [packed = true];
  int int32_val_size() const;
  private:
  int _internal_int32_val_size() const;
  public:
  void clear_int32_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int32_val() const;
  void _internal_add_int32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int32_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int32_val(int index) const;
  void set_int32_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int32_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int32_val();

  // repeated int64 int64_val = 2 [packed = true];
  int int64_val_size() const;
  private:
  int _internal_int64_val_size() const;
  public:
  void clear_int64_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int64_val() const;
  void _internal_add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int64_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int64_val(int index) const;
  void set_int64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64_val();

  // repeated uint32 uint32_val = 3 [packed = true];
  int uint32_val_size() const;
  private:
  int _internal_uint32_val_size() const;
  public:
  void clear_uint32_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_uint32_val() const;
  void _internal_add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_uint32_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_val(int index) const;
  void set_uint32_val(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      uint32_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_uint32_val();

  // repeated uint64 uint64_val = 4 [packed = true];
  int uint64_val_size() const;
  private:
  int _internal_uint64_val_size() const;
  public:
  void clear_uint64_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_uint64_val() const;
  void _internal_add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_uint64_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_val(int index) const;
  void set_uint64_val(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint64_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint64_val();

  // repeated sint32 sint32_val = 5 [packed = true];
  int sint32_val_size() const;
  private:
  int _internal_sint32_val_size() const;
  public:
  void clear_sint32_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_sint32_val() const;
  void _internal_add_sint32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_sint32_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_val(int index) const;
  void set_sint32_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sint32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sint32_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sint32_val();

  // repeated sint64 sint64_val = 6 [packed = true];
  int sint64_val_size() const;
  private:
  int _internal_sint64_val_size() const;
  public:
  void clear_sint64_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_sint64_val() const;
  void _internal_add_sint64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_sint64_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_val(int index) const;
  void set_sint64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sint64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sint64_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sint64_val();

  // repeated bool bool_val = 7 [packed = true];
  int bool_val_size() const;
  private:
  int _internal_bool_val_size() const;
  public:
  void clear_bool_val();
  private:
  bool _internal_bool_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_val() const;
  void _internal_add_bool_val(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_val();
  public:
  bool bool_val(int index) const;
  void set_bool_val(int index, bool value);
  void add_bool_val(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_val();

  // repeated .Enum enum_val = 8 [packed = true];
  int enum_val_size() const;
  private:
  int _internal_enum_val_size() const;
  public:
  void clear_enum_val();
  private:
  ::Enum _internal_enum_val(int index) const;
  void _internal_add_enum_val(::Enum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enum_val();
  public:
  ::Enum enum_val(int index) const;
  void set_enum_val(int index, ::Enum value);
  void add_enum_val(::Enum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enum_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enum_val();

  // repeated fixed64 fixed64_val = 9 [packed = true];
  int fixed64_val_size() const;
  private:
  int _internal_fixed64_val_size() const;
  public:
  void clear_fixed64_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_fixed64_val() const;
  void _internal_add_fixed64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_fixed64_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_val(int index) const;
  void set_fixed64_val(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_fixed64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      fixed64_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_fixed64_val();

  // repeated sfixed64 sfixed64_val = 10 [packed = true];
  int sfixed64_val_size() const;
  private:
  int _internal_sfixed64_val_size() const;
  public:
  void clear_sfixed64_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_sfixed64_val() const;
  void _internal_add_sfixed64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_sfixed64_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_val(int index) const;
  void set_sfixed64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_sfixed64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      sfixed64_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_sfixed64_val();

  // repeated double double_val = 11 [packed = true];
  int double_val_size() const;
  private:
  int _internal_double_val_size() const;
  public:
  void clear_double_val();
  private:
  double _internal_double_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_val() const;
  void _internal_add_double_val(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_val();
  public:
  double double_val(int index) const;
  void set_double_val(int index, double value);
  void add_double_val(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_val();

  // repeated string string_val = 12;
  int string_val_size() const;
  private:
  int _internal_string_val_size() const;
  public:
  void clear_string_val();
  const std::string& string_val(int index) const;
  std::string* mutable_string_val(int index);
  void set_string_val(int index, const std::string& value);
  void set_string_val(int index, std::string&& value);
  void set_string_val(int index, const char* value);
  void set_string_val(int index, const char* value, size_t size);
  std::string* add_string_val();
  void add_string_val(const std::string& value);
  void add_string_val(std::string&& value);
  void add_string_val(const char* value);
  void add_string_val(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_val();
  private:
  const std::string& _internal_string_val(int index) const;
  std::string* _internal_add_string_val();
  public:

  // repeated bytes bytes_val = 13;
  int bytes_val_size() const;
  private:
  int _internal_bytes_val_size() const;
  public:
  void clear_bytes_val();
  const std::string& bytes_val(int index) const;
  std::string* mutable_bytes_val(int index);
  void set_bytes_val(int index, const std::string& value);
  void set_bytes_val(int index, std::string&& value);
  void set_bytes_val(int index, const char* value);
  void set_bytes_val(int index, const void* value, size_t size);
  std::string* add_bytes_val();
  void add_bytes_val(const std::string& value);
  void add_bytes_val(std::string&& value);
  void add_bytes_val(const char* value);
  void add_bytes_val(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bytes_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bytes_val();
  private:
  const std::string& _internal_bytes_val(int index) const;
  std::string* _internal_add_bytes_val();
  public:

  // repeated fixed32 fixed32_val = 14 [packed = true];
  int fixed32_val_size() const;
  private:
  int _internal_fixed32_val_size() const;
  public:
  void clear_fixed32_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_fixed32_val() const;
  void _internal_add_fixed32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_fixed32_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_val(int index) const;
  void set_fixed32_val(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_fixed32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      fixed32_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_fixed32_val();

  // repeated sfixed32 sfixed32_val = 15 [packed = true];
  int sfixed32_val_size() const;
  private:
  int _internal_sfixed32_val_size() const;
  public:
  void clear_sfixed32_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_sfixed32_val() const;
  void _internal_add_sfixed32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_sfixed32_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_val(int index) const;
  void set_sfixed32_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sfixed32_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sfixed32_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sfixed32_val();

  // repeated float float_val = 16 [packed = true];
  int float_val_size() const;
  private:
  int _internal_float_val_size() const;
  public:
  void clear_float_val();
  private:
  float _internal_float_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_val() const;
  void _internal_add_float_val(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_val();
  public:
  float float_val(int index) const;
  void set_float_val(int index, float value);
  void add_float_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_val();

  // @@protoc_insertion_point(class_scope:Packed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int32_val_;
  mutable std::atomic<int> _int32_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64_val_;
  mutable std::atomic<int> _int64_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > uint32_val_;
  mutable std::atomic<int> _uint32_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint64_val_;
  mutable std::atomic<int> _uint64_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sint32_val_;
  mutable std::atomic<int> _sint32_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sint64_val_;
  mutable std::atomic<int> _sint64_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool_val_;
  mutable std::atomic<int> _bool_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enum_val_;
  mutable std::atomic<int> _enum_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > fixed64_val_;
  mutable std::atomic<int> _fixed64_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > sfixed64_val_;
  mutable std::atomic<int> _sfixed64_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_val_;
  mutable std::atomic<int> _double_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bytes_val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > fixed32_val_;
  mutable std::atomic<int> _fixed32_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sfixed32_val_;
  mutable std::atomic<int> _sfixed32_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_val_;
  mutable std::atomic<int> _float_val_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_reference_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Singular

// optional int32 int32_val = 1;
inline bool Singular::_internal_has_int32_val() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Singular::has_int32_val() const {
  return _internal_has_int32_val();
}
inline void Singular::clear_int32_val() {
  int32_val_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Singular::_internal_int32_val() const {
  return int32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Singular::int32_val() const {
  // @@protoc_insertion_point(field_get:Singular.int32_val)
  return _internal_int32_val();
}
inline void Singular::_internal_set_int32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  int32_val_ = value;
}
inline void Singular::set_int32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_val(value);
  // @@protoc_insertion_point(field_set:Singular.int32_val)
}

// optional int64 int64_val = 2;
inline bool Singular::_internal_has_int64_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Singular::has_int64_val() const {
  return _internal_has_int64_val();
}
inline void Singular::clear_int64_val() {
  int64_val_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Singular::_internal_int64_val() const {
  return int64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Singular::int64_val() const {
  // @@protoc_insertion_point(field_get:Singular.int64_val)
  return _internal_int64_val();
}
inline void Singular::_internal_set_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  int64_val_ = value;
}
inline void Singular::set_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_val(value);
  // @@protoc_insertion_point(field_set:Singular.int64_val)
}

// optional uint32 uint32_val = 3;
inline bool Singular::_internal_has_uint32_val() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Singular::has_uint32_val() const {
  return _internal_has_uint32_val();
}
inline void Singular::clear_uint32_val() {
  uint32_val_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Singular::_internal_uint32_val() const {
  return uint32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Singular::uint32_val() const {
  // @@protoc_insertion_point(field_get:Singular.uint32_val)
  return _internal_uint32_val();
}
inline void Singular::_internal_set_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  uint32_val_ = value;
}
inline void Singular::set_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_val(value);
  // @@protoc_insertion_point(field_set:Singular.uint32_val)
}

// optional uint64 uint64_val = 4;
inline bool Singular::_internal_has_uint64_val() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Singular::has_uint64_val() const {
  return _internal_has_uint64_val();
}
inline void Singular::clear_uint64_val() {
  uint64_val_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Singular::_internal_uint64_val() const {
  return uint64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Singular::uint64_val() const {
  // @@protoc_insertion_point(field_get:Singular.uint64_val)
  return _internal_uint64_val();
}
inline void Singular::_internal_set_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  uint64_val_ = value;
}
inline void Singular::set_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64_val(value);
  // @@protoc_insertion_point(field_set:Singular.uint64_val)
}

// optional sint32 sint32_val = 5;
inline bool Singular::_internal_has_sint32_val() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Singular::has_sint32_val() const {
  return _internal_has_sint32_val();
}
inline void Singular::clear_sint32_val() {
  sint32_val_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Singular::_internal_sint32_val() const {
  return sint32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Singular::sint32_val() const {
  // @@protoc_insertion_point(field_get:Singular.sint32_val)
  return _internal_sint32_val();
}
inline void Singular::_internal_set_sint32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  sint32_val_ = value;
}
inline void Singular::set_sint32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint32_val(value);
  // @@protoc_insertion_point(field_set:Singular.sint32_val)
}

// optional sint64 sint64_val = 6;
inline bool Singular::_internal_has_sint64_val() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Singular::has_sint64_val() const {
  return _internal_has_sint64_val();
}
inline void Singular::clear_sint64_val() {
  sint64_val_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Singular::_internal_sint64_val() const {
  return sint64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Singular::sint64_val() const {
  // @@protoc_insertion_point(field_get:Singular.sint64_val)
  return _internal_sint64_val();
}
inline void Singular::_internal_set_sint64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  sint64_val_ = value;
}
inline void Singular::set_sint64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64_val(value);
  // @@protoc_insertion_point(field_set:Singular.sint64_val)
}

// optional bool bool_val = 7;
inline bool Singular::_internal_has_bool_val() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Singular::has_bool_val() const {
  return _internal_has_bool_val();
}
inline void Singular::clear_bool_val() {
  bool_val_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Singular::_internal_bool_val() const {
  return bool_val_;
}
inline bool Singular::bool_val() const {
  // @@protoc_insertion_point(field_get:Singular.bool_val)
  return _internal_bool_val();
}
inline void Singular::_internal_set_bool_val(bool value) {
  _has_bits_[0] |= 0x00000100u;
  bool_val_ = value;
}
inline void Singular::set_bool_val(bool value) {
  _internal_set_bool_val(value);
  // @@protoc_insertion_point(field_set:Singular.bool_val)
}

// optional .Enum enum_val = 8;
inline bool Singular::_internal_has_enum_val() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Singular::has_enum_val() const {
  return _internal_has_enum_val();
}
inline void Singular::clear_enum_val() {
  enum_val_ = -1;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::Enum Singular::_internal_enum_val() const {
  return static_cast< ::Enum >(enum_val_);
}
inline ::Enum Singular::enum_val() const {
  // @@protoc_insertion_point(field_get:Singular.enum_val)
  return _internal_enum_val();
}
inline void Singular::_internal_set_enum_val(::Enum value) {
  assert(::Enum_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  enum_val_ = value;
}
inline void Singular::set_enum_val(::Enum value) {
  _internal_set_enum_val(value);
  // @@protoc_insertion_point(field_set:Singular.enum_val)
}

// optional fixed64 fixed64_val = 9;
inline bool Singular::_internal_has_fixed64_val() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Singular::has_fixed64_val() const {
  return _internal_has_fixed64_val();
}
inline void Singular::clear_fixed64_val() {
  fixed64_val_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Singular::_internal_fixed64_val() const {
  return fixed64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Singular::fixed64_val() const {
  // @@protoc_insertion_point(field_get:Singular.fixed64_val)
  return _internal_fixed64_val();
}
inline void Singular::_internal_set_fixed64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  fixed64_val_ = value;
}
inline void Singular::set_fixed64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixed64_val(value);
  // @@protoc_insertion_point(field_set:Singular.fixed64_val)
}

// optional sfixed64 sfixed64_val = 10;
inline bool Singular::_internal_has_sfixed64_val() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Singular::has_sfixed64_val() const {
  return _internal_has_sfixed64_val();
}
inline void Singular::clear_sfixed64_val() {
  sfixed64_val_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Singular::_internal_sfixed64_val() const {
  return sfixed64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Singular::sfixed64_val() const {
  // @@protoc_insertion_point(field_get:Singular.sfixed64_val)
  return _internal_sfixed64_val();
}
inline void Singular::_internal_set_sfixed64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  sfixed64_val_ = value;
}
inline void Singular::set_sfixed64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sfixed64_val(value);
  // @@protoc_insertion_point(field_set:Singular.sfixed64_val)
}

// optional double double_val = 11;
inline bool Singular::_internal_has_double_val() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Singular::has_double_val() const {
  return _internal_has_double_val();
}
inline void Singular::clear_double_val() {
  double_val_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Singular::_internal_double_val() const {
  return double_val_;
}
inline double Singular::double_val() const {
  // @@protoc_insertion_point(field_get:Singular.double_val)
  return _internal_double_val();
}
inline void Singular::_internal_set_double_val(double value) {
  _has_bits_[0] |= 0x00000800u;
  double_val_ = value;
}
inline void Singular::set_double_val(double value) {
  _internal_set_double_val(value);
  // @@protoc_insertion_point(field_set:Singular.double_val)
}

// optional string string_val = 12;
inline bool Singular::_internal_has_string_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Singular::has_string_val() const {
  return _internal_has_string_val();
}
inline void Singular::clear_string_val() {
  string_val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Singular::string_val() const {
  // @@protoc_insertion_point(field_get:Singular.string_val)
  return _internal_string_val();
}
inline void Singular::set_string_val(const std::string& value) {
  _internal_set_string_val(value);
  // @@protoc_insertion_point(field_set:Singular.string_val)
}
inline std::string* Singular::mutable_string_val() {
  // @@protoc_insertion_point(field_mutable:Singular.string_val)
  return _internal_mutable_string_val();
}
inline const std::string& Singular::_internal_string_val() const {
  return string_val_.Get();
}
inline void Singular::_internal_set_string_val(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Singular::set_string_val(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  string_val_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Singular.string_val)
}
inline void Singular::set_string_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  string_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Singular.string_val)
}
inline void Singular::set_string_val(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  string_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Singular.string_val)
}
inline std::string* Singular::_internal_mutable_string_val() {
  _has_bits_[0] |= 0x00000001u;
  return string_val_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Singular::release_string_val() {
  // @@protoc_insertion_point(field_release:Singular.string_val)
  if (!_internal_has_string_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Singular::set_allocated_string_val(std::string* string_val) {
  if (string_val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Singular.string_val)
}
inline std::string* Singular::unsafe_arena_release_string_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Singular.string_val)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return string_val_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Singular::unsafe_arena_set_allocated_string_val(
    std::string* string_val) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (string_val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_val_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      string_val, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Singular.string_val)
}

// optional bytes bytes_val = 13;
inline bool Singular::_internal_has_bytes_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Singular::has_bytes_val() const {
  return _internal_has_bytes_val();
}
inline void Singular::clear_bytes_val() {
  bytes_val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Singular::bytes_val() const {
  // @@protoc_insertion_point(field_get:Singular.bytes_val)
  return _internal_bytes_val();
}
inline void Singular::set_bytes_val(const std::string& value) {
  _internal_set_bytes_val(value);
  // @@protoc_insertion_point(field_set:Singular.bytes_val)
}
inline std::string* Singular::mutable_bytes_val() {
  // @@protoc_insertion_point(field_mutable:Singular.bytes_val)
  return _internal_mutable_bytes_val();
}
inline const std::string& Singular::_internal_bytes_val() const {
  return bytes_val_.Get();
}
inline void Singular::_internal_set_bytes_val(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Singular::set_bytes_val(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_val_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Singular.bytes_val)
}
inline void Singular::set_bytes_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bytes_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Singular.bytes_val)
}
inline void Singular::set_bytes_val(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bytes_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Singular.bytes_val)
}
inline std::string* Singular::_internal_mutable_bytes_val() {
  _has_bits_[0] |= 0x00000002u;
  return bytes_val_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Singular::release_bytes_val() {
  // @@protoc_insertion_point(field_release:Singular.bytes_val)
  if (!_internal_has_bytes_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bytes_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Singular::set_allocated_bytes_val(std::string* bytes_val) {
  if (bytes_val != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bytes_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Singular.bytes_val)
}
inline std::string* Singular::unsafe_arena_release_bytes_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Singular.bytes_val)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return bytes_val_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Singular::unsafe_arena_set_allocated_bytes_val(
    std::string* bytes_val) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bytes_val != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bytes_val_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bytes_val, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Singular.bytes_val)
}

// optional fixed32 fixed32_val = 14;
inline bool Singular::_internal_has_fixed32_val() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Singular::has_fixed32_val() const {
  return _internal_has_fixed32_val();
}
inline void Singular::clear_fixed32_val() {
  fixed32_val_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Singular::_internal_fixed32_val() const {
  return fixed32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Singular::fixed32_val() const {
  // @@protoc_insertion_point(field_get:Singular.fixed32_val)
  return _internal_fixed32_val();
}
inline void Singular::_internal_set_fixed32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  fixed32_val_ = value;
}
inline void Singular::set_fixed32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed32_val(value);
  // @@protoc_insertion_point(field_set:Singular.fixed32_val)
}

// optional sfixed32 sfixed32_val = 15;
inline bool Singular::_internal_has_sfixed32_val() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Singular::has_sfixed32_val() const {
  return _internal_has_sfixed32_val();
}
inline void Singular::clear_sfixed32_val() {
  sfixed32_val_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Singular::_internal_sfixed32_val() const {
  return sfixed32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Singular::sfixed32_val() const {
  // @@protoc_insertion_point(field_get:Singular.sfixed32_val)
  return _internal_sfixed32_val();
}
inline void Singular::_internal_set_sfixed32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  sfixed32_val_ = value;
}
inline void Singular::set_sfixed32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sfixed32_val(value);
  // @@protoc_insertion_point(field_set:Singular.sfixed32_val)
}

// optional float float_val = 16;
inline bool Singular::_internal_has_float_val() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Singular::has_float_val() const {
  return _internal_has_float_val();
}
inline void Singular::clear_float_val() {
  float_val_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float Singular::_internal_float_val() const {
  return float_val_;
}
inline float Singular::float_val() const {
  // @@protoc_insertion_point(field_get:Singular.float_val)
  return _internal_float_val();
}
inline void Singular::_internal_set_float_val(float value) {
  _has_bits_[0] |= 0x00004000u;
  float_val_ = value;
}
inline void Singular::set_float_val(float value) {
  _internal_set_float_val(value);
  // @@protoc_insertion_point(field_set:Singular.float_val)
}

// -------------------------------------------------------------------

// Packed

// repeated int32 int32_val = 1 [packed = true];
inline int Packed::_internal_int32_val_size() const {
  return int32_val_.size();
}
inline int Packed::int32_val_size() const {
  return _internal_int32_val_size();
}
inline void Packed::clear_int32_val() {
  int32_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packed::_internal_int32_val(int index) const {
  return int32_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packed::int32_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.int32_val)
  return _internal_int32_val(index);
}
inline void Packed::set_int32_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.int32_val)
}
inline void Packed::_internal_add_int32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_val_.Add(value);
}
inline void Packed::add_int32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int32_val(value);
  // @@protoc_insertion_point(field_add:Packed.int32_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Packed::_internal_int32_val() const {
  return int32_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Packed::int32_val() const {
  // @@protoc_insertion_point(field_list:Packed.int32_val)
  return _internal_int32_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Packed::_internal_mutable_int32_val() {
  return &int32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Packed::mutable_int32_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.int32_val)
  return _internal_mutable_int32_val();
}

// repeated int64 int64_val = 2 [packed = true];
inline int Packed::_internal_int64_val_size() const {
  return int64_val_.size();
}
inline int Packed::int64_val_size() const {
  return _internal_int64_val_size();
}
inline void Packed::clear_int64_val() {
  int64_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Packed::_internal_int64_val(int index) const {
  return int64_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Packed::int64_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.int64_val)
  return _internal_int64_val(index);
}
inline void Packed::set_int64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.int64_val)
}
inline void Packed::_internal_add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_val_.Add(value);
}
inline void Packed::add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int64_val(value);
  // @@protoc_insertion_point(field_add:Packed.int64_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Packed::_internal_int64_val() const {
  return int64_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Packed::int64_val() const {
  // @@protoc_insertion_point(field_list:Packed.int64_val)
  return _internal_int64_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Packed::_internal_mutable_int64_val() {
  return &int64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Packed::mutable_int64_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.int64_val)
  return _internal_mutable_int64_val();
}

// repeated uint32 uint32_val = 3 [packed = true];
inline int Packed::_internal_uint32_val_size() const {
  return uint32_val_.size();
}
inline int Packed::uint32_val_size() const {
  return _internal_uint32_val_size();
}
inline void Packed::clear_uint32_val() {
  uint32_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packed::_internal_uint32_val(int index) const {
  return uint32_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packed::uint32_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.uint32_val)
  return _internal_uint32_val(index);
}
inline void Packed::set_uint32_val(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.uint32_val)
}
inline void Packed::_internal_add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_val_.Add(value);
}
inline void Packed::add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_uint32_val(value);
  // @@protoc_insertion_point(field_add:Packed.uint32_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Packed::_internal_uint32_val() const {
  return uint32_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Packed::uint32_val() const {
  // @@protoc_insertion_point(field_list:Packed.uint32_val)
  return _internal_uint32_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Packed::_internal_mutable_uint32_val() {
  return &uint32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Packed::mutable_uint32_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.uint32_val)
  return _internal_mutable_uint32_val();
}

// repeated uint64 uint64_val = 4 [packed = true];
inline int Packed::_internal_uint64_val_size() const {
  return uint64_val_.size();
}
inline int Packed::uint64_val_size() const {
  return _internal_uint64_val_size();
}
inline void Packed::clear_uint64_val() {
  uint64_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packed::_internal_uint64_val(int index) const {
  return uint64_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packed::uint64_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.uint64_val)
  return _internal_uint64_val(index);
}
inline void Packed::set_uint64_val(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.uint64_val)
}
inline void Packed::_internal_add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_val_.Add(value);
}
inline void Packed::add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_uint64_val(value);
  // @@protoc_insertion_point(field_add:Packed.uint64_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Packed::_internal_uint64_val() const {
  return uint64_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Packed::uint64_val() const {
  // @@protoc_insertion_point(field_list:Packed.uint64_val)
  return _internal_uint64_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Packed::_internal_mutable_uint64_val() {
  return &uint64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Packed::mutable_uint64_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.uint64_val)
  return _internal_mutable_uint64_val();
}

// repeated sint32 sint32_val = 5 [packed = true];
inline int Packed::_internal_sint32_val_size() const {
  return sint32_val_.size();
}
inline int Packed::sint32_val_size() const {
  return _internal_sint32_val_size();
}
inline void Packed::clear_sint32_val() {
  sint32_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packed::_internal_sint32_val(int index) const {
  return sint32_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packed::sint32_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.sint32_val)
  return _internal_sint32_val(index);
}
inline void Packed::set_sint32_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sint32_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.sint32_val)
}
inline void Packed::_internal_add_sint32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sint32_val_.Add(value);
}
inline void Packed::add_sint32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_sint32_val(value);
  // @@protoc_insertion_point(field_add:Packed.sint32_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Packed::_internal_sint32_val() const {
  return sint32_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Packed::sint32_val() const {
  // @@protoc_insertion_point(field_list:Packed.sint32_val)
  return _internal_sint32_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Packed::_internal_mutable_sint32_val() {
  return &sint32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Packed::mutable_sint32_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.sint32_val)
  return _internal_mutable_sint32_val();
}

// repeated sint64 sint64_val = 6 [packed = true];
inline int Packed::_internal_sint64_val_size() const {
  return sint64_val_.size();
}
inline int Packed::sint64_val_size() const {
  return _internal_sint64_val_size();
}
inline void Packed::clear_sint64_val() {
  sint64_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Packed::_internal_sint64_val(int index) const {
  return sint64_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Packed::sint64_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.sint64_val)
  return _internal_sint64_val(index);
}
inline void Packed::set_sint64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sint64_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.sint64_val)
}
inline void Packed::_internal_add_sint64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sint64_val_.Add(value);
}
inline void Packed::add_sint64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_sint64_val(value);
  // @@protoc_insertion_point(field_add:Packed.sint64_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Packed::_internal_sint64_val() const {
  return sint64_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Packed::sint64_val() const {
  // @@protoc_insertion_point(field_list:Packed.sint64_val)
  return _internal_sint64_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Packed::_internal_mutable_sint64_val() {
  return &sint64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Packed::mutable_sint64_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.sint64_val)
  return _internal_mutable_sint64_val();
}

// repeated bool bool_val = 7 [packed = true];
inline int Packed::_internal_bool_val_size() const {
  return bool_val_.size();
}
inline int Packed::bool_val_size() const {
  return _internal_bool_val_size();
}
inline void Packed::clear_bool_val() {
  bool_val_.Clear();
}
inline bool Packed::_internal_bool_val(int index) const {
  return bool_val_.Get(index);
}
inline bool Packed::bool_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.bool_val)
  return _internal_bool_val(index);
}
inline void Packed::set_bool_val(int index, bool value) {
  bool_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.bool_val)
}
inline void Packed::_internal_add_bool_val(bool value) {
  bool_val_.Add(value);
}
inline void Packed::add_bool_val(bool value) {
  _internal_add_bool_val(value);
  // @@protoc_insertion_point(field_add:Packed.bool_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Packed::_internal_bool_val() const {
  return bool_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Packed::bool_val() const {
  // @@protoc_insertion_point(field_list:Packed.bool_val)
  return _internal_bool_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Packed::_internal_mutable_bool_val() {
  return &bool_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Packed::mutable_bool_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.bool_val)
  return _internal_mutable_bool_val();
}

// repeated .Enum enum_val = 8 [packed = true];
inline int Packed::_internal_enum_val_size() const {
  return enum_val_.size();
}
inline int Packed::enum_val_size() const {
  return _internal_enum_val_size();
}
inline void Packed::clear_enum_val() {
  enum_val_.Clear();
}
inline ::Enum Packed::_internal_enum_val(int index) const {
  return static_cast< ::Enum >(enum_val_.Get(index));
}
inline ::Enum Packed::enum_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.enum_val)
  return _internal_enum_val(index);
}
inline void Packed::set_enum_val(int index, ::Enum value) {
  assert(::Enum_IsValid(value));
  enum_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.enum_val)
}
inline void Packed::_internal_add_enum_val(::Enum value) {
  assert(::Enum_IsValid(value));
  enum_val_.Add(value);
}
inline void Packed::add_enum_val(::Enum value) {
  // @@protoc_insertion_point(field_add:Packed.enum_val)
  _internal_add_enum_val(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Packed::enum_val() const {
  // @@protoc_insertion_point(field_list:Packed.enum_val)
  return enum_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Packed::_internal_mutable_enum_val() {
  return &enum_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Packed::mutable_enum_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.enum_val)
  return _internal_mutable_enum_val();
}

// repeated fixed64 fixed64_val = 9 [packed = true];
inline int Packed::_internal_fixed64_val_size() const {
  return fixed64_val_.size();
}
inline int Packed::fixed64_val_size() const {
  return _internal_fixed64_val_size();
}
inline void Packed::clear_fixed64_val() {
  fixed64_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packed::_internal_fixed64_val(int index) const {
  return fixed64_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Packed::fixed64_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.fixed64_val)
  return _internal_fixed64_val(index);
}
inline void Packed::set_fixed64_val(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  fixed64_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.fixed64_val)
}
inline void Packed::_internal_add_fixed64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  fixed64_val_.Add(value);
}
inline void Packed::add_fixed64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_fixed64_val(value);
  // @@protoc_insertion_point(field_add:Packed.fixed64_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Packed::_internal_fixed64_val() const {
  return fixed64_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Packed::fixed64_val() const {
  // @@protoc_insertion_point(field_list:Packed.fixed64_val)
  return _internal_fixed64_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Packed::_internal_mutable_fixed64_val() {
  return &fixed64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Packed::mutable_fixed64_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.fixed64_val)
  return _internal_mutable_fixed64_val();
}

// repeated sfixed64 sfixed64_val = 10 [packed = true];
inline int Packed::_internal_sfixed64_val_size() const {
  return sfixed64_val_.size();
}
inline int Packed::sfixed64_val_size() const {
  return _internal_sfixed64_val_size();
}
inline void Packed::clear_sfixed64_val() {
  sfixed64_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Packed::_internal_sfixed64_val(int index) const {
  return sfixed64_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Packed::sfixed64_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.sfixed64_val)
  return _internal_sfixed64_val(index);
}
inline void Packed::set_sfixed64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  sfixed64_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.sfixed64_val)
}
inline void Packed::_internal_add_sfixed64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  sfixed64_val_.Add(value);
}
inline void Packed::add_sfixed64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_sfixed64_val(value);
  // @@protoc_insertion_point(field_add:Packed.sfixed64_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Packed::_internal_sfixed64_val() const {
  return sfixed64_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Packed::sfixed64_val() const {
  // @@protoc_insertion_point(field_list:Packed.sfixed64_val)
  return _internal_sfixed64_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Packed::_internal_mutable_sfixed64_val() {
  return &sfixed64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Packed::mutable_sfixed64_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.sfixed64_val)
  return _internal_mutable_sfixed64_val();
}

// repeated double double_val = 11 [packed = true];
inline int Packed::_internal_double_val_size() const {
  return double_val_.size();
}
inline int Packed::double_val_size() const {
  return _internal_double_val_size();
}
inline void Packed::clear_double_val() {
  double_val_.Clear();
}
inline double Packed::_internal_double_val(int index) const {
  return double_val_.Get(index);
}
inline double Packed::double_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.double_val)
  return _internal_double_val(index);
}
inline void Packed::set_double_val(int index, double value) {
  double_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.double_val)
}
inline void Packed::_internal_add_double_val(double value) {
  double_val_.Add(value);
}
inline void Packed::add_double_val(double value) {
  _internal_add_double_val(value);
  // @@protoc_insertion_point(field_add:Packed.double_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Packed::_internal_double_val() const {
  return double_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Packed::double_val() const {
  // @@protoc_insertion_point(field_list:Packed.double_val)
  return _internal_double_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Packed::_internal_mutable_double_val() {
  return &double_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Packed::mutable_double_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.double_val)
  return _internal_mutable_double_val();
}

// repeated string string_val = 12;
inline int Packed::_internal_string_val_size() const {
  return string_val_.size();
}
inline int Packed::string_val_size() const {
  return _internal_string_val_size();
}
inline void Packed::clear_string_val() {
  string_val_.Clear();
}
inline std::string* Packed::add_string_val() {
  // @@protoc_insertion_point(field_add_mutable:Packed.string_val)
  return _internal_add_string_val();
}
inline const std::string& Packed::_internal_string_val(int index) const {
  return string_val_.Get(index);
}
inline const std::string& Packed::string_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.string_val)
  return _internal_string_val(index);
}
inline std::string* Packed::mutable_string_val(int index) {
  // @@protoc_insertion_point(field_mutable:Packed.string_val)
  return string_val_.Mutable(index);
}
inline void Packed::set_string_val(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Packed.string_val)
  string_val_.Mutable(index)->assign(value);
}
inline void Packed::set_string_val(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Packed.string_val)
  string_val_.Mutable(index)->assign(std::move(value));
}
inline void Packed::set_string_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Packed.string_val)
}
inline void Packed::set_string_val(int index, const char* value, size_t size) {
  string_val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packed.string_val)
}
inline std::string* Packed::_internal_add_string_val() {
  return string_val_.Add();
}
inline void Packed::add_string_val(const std::string& value) {
  string_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Packed.string_val)
}
inline void Packed::add_string_val(std::string&& value) {
  string_val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Packed.string_val)
}
inline void Packed::add_string_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Packed.string_val)
}
inline void Packed::add_string_val(const char* value, size_t size) {
  string_val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Packed.string_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Packed::string_val() const {
  // @@protoc_insertion_point(field_list:Packed.string_val)
  return string_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Packed::mutable_string_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.string_val)
  return &string_val_;
}

// repeated bytes bytes_val = 13;
inline int Packed::_internal_bytes_val_size() const {
  return bytes_val_.size();
}
inline int Packed::bytes_val_size() const {
  return _internal_bytes_val_size();
}
inline void Packed::clear_bytes_val() {
  bytes_val_.Clear();
}
inline std::string* Packed::add_bytes_val() {
  // @@protoc_insertion_point(field_add_mutable:Packed.bytes_val)
  return _internal_add_bytes_val();
}
inline const std::string& Packed::_internal_bytes_val(int index) const {
  return bytes_val_.Get(index);
}
inline const std::string& Packed::bytes_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.bytes_val)
  return _internal_bytes_val(index);
}
inline std::string* Packed::mutable_bytes_val(int index) {
  // @@protoc_insertion_point(field_mutable:Packed.bytes_val)
  return bytes_val_.Mutable(index);
}
inline void Packed::set_bytes_val(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Packed.bytes_val)
  bytes_val_.Mutable(index)->assign(value);
}
inline void Packed::set_bytes_val(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Packed.bytes_val)
  bytes_val_.Mutable(index)->assign(std::move(value));
}
inline void Packed::set_bytes_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Packed.bytes_val)
}
inline void Packed::set_bytes_val(int index, const void* value, size_t size) {
  bytes_val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Packed.bytes_val)
}
inline std::string* Packed::_internal_add_bytes_val() {
  return bytes_val_.Add();
}
inline void Packed::add_bytes_val(const std::string& value) {
  bytes_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Packed.bytes_val)
}
inline void Packed::add_bytes_val(std::string&& value) {
  bytes_val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Packed.bytes_val)
}
inline void Packed::add_bytes_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Packed.bytes_val)
}
inline void Packed::add_bytes_val(const void* value, size_t size) {
  bytes_val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Packed.bytes_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Packed::bytes_val() const {
  // @@protoc_insertion_point(field_list:Packed.bytes_val)
  return bytes_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Packed::mutable_bytes_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.bytes_val)
  return &bytes_val_;
}

// repeated fixed32 fixed32_val = 14 [packed = true];
inline int Packed::_internal_fixed32_val_size() const {
  return fixed32_val_.size();
}
inline int Packed::fixed32_val_size() const {
  return _internal_fixed32_val_size();
}
inline void Packed::clear_fixed32_val() {
  fixed32_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packed::_internal_fixed32_val(int index) const {
  return fixed32_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packed::fixed32_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.fixed32_val)
  return _internal_fixed32_val(index);
}
inline void Packed::set_fixed32_val(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fixed32_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.fixed32_val)
}
inline void Packed::_internal_add_fixed32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  fixed32_val_.Add(value);
}
inline void Packed::add_fixed32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_fixed32_val(value);
  // @@protoc_insertion_point(field_add:Packed.fixed32_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Packed::_internal_fixed32_val() const {
  return fixed32_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Packed::fixed32_val() const {
  // @@protoc_insertion_point(field_list:Packed.fixed32_val)
  return _internal_fixed32_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Packed::_internal_mutable_fixed32_val() {
  return &fixed32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Packed::mutable_fixed32_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.fixed32_val)
  return _internal_mutable_fixed32_val();
}

// repeated sfixed32 sfixed32_val = 15 [packed = true];
inline int Packed::_internal_sfixed32_val_size() const {
  return sfixed32_val_.size();
}
inline int Packed::sfixed32_val_size() const {
  return _internal_sfixed32_val_size();
}
inline void Packed::clear_sfixed32_val() {
  sfixed32_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packed::_internal_sfixed32_val(int index) const {
  return sfixed32_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packed::sfixed32_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.sfixed32_val)
  return _internal_sfixed32_val(index);
}
inline void Packed::set_sfixed32_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sfixed32_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.sfixed32_val)
}
inline void Packed::_internal_add_sfixed32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sfixed32_val_.Add(value);
}
inline void Packed::add_sfixed32_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_sfixed32_val(value);
  // @@protoc_insertion_point(field_add:Packed.sfixed32_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Packed::_internal_sfixed32_val() const {
  return sfixed32_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Packed::sfixed32_val() const {
  // @@protoc_insertion_point(field_list:Packed.sfixed32_val)
  return _internal_sfixed32_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Packed::_internal_mutable_sfixed32_val() {
  return &sfixed32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Packed::mutable_sfixed32_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.sfixed32_val)
  return _internal_mutable_sfixed32_val();
}

// repeated float float_val = 16 [packed = true];
inline int Packed::_internal_float_val_size() const {
  return float_val_.size();
}
inline int Packed::float_val_size() const {
  return _internal_float_val_size();
}
inline void Packed::clear_float_val() {
  float_val_.Clear();
}
inline float Packed::_internal_float_val(int index) const {
  return float_val_.Get(index);
}
inline float Packed::float_val(int index) const {
  // @@protoc_insertion_point(field_get:Packed.float_val)
  return _internal_float_val(index);
}
inline void Packed::set_float_val(int index, float value) {
  float_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:Packed.float_val)
}
inline void Packed::_internal_add_float_val(float value) {
  float_val_.Add(value);
}
inline void Packed::add_float_val(float value) {
  _internal_add_float_val(value);
  // @@protoc_insertion_point(field_add:Packed.float_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Packed::_internal_float_val() const {
  return float_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Packed::float_val() const {
  // @@protoc_insertion_point(field_list:Packed.float_val)
  return _internal_float_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Packed::_internal_mutable_float_val() {
  return &float_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Packed::mutable_float_val() {
  // @@protoc_insertion_point(field_mutable_list:Packed.float_val)
  return _internal_mutable_float_val();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Enum>() {
  return ::Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_reference_2eproto
