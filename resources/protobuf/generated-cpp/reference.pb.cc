// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reference.proto

#include "reference.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class SingularDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Singular> _instance;
} _Singular_default_instance_;
class PackedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Packed> _instance;
} _Packed_default_instance_;
static void InitDefaultsscc_info_Packed_reference_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Packed_default_instance_;
    new (ptr) ::Packed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Packed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Packed_reference_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Packed_reference_2eproto}, {}};

static void InitDefaultsscc_info_Singular_reference_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Singular_default_instance_;
    new (ptr) ::Singular();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Singular::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Singular_reference_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Singular_reference_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_reference_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_reference_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_reference_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_reference_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Singular, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Singular, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Singular, int32_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, int64_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, uint32_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, uint64_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, sint32_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, sint64_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, bool_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, enum_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, fixed64_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, sfixed64_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, double_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, string_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, bytes_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, fixed32_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, sfixed32_val_),
  PROTOBUF_FIELD_OFFSET(::Singular, float_val_),
  3,
  2,
  4,
  5,
  7,
  6,
  8,
  15,
  9,
  10,
  11,
  0,
  1,
  12,
  13,
  14,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Packed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Packed, int32_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, int64_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, uint32_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, uint64_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, sint32_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, sint64_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, bool_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, enum_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, fixed64_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, sfixed64_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, double_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, string_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, bytes_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, fixed32_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, sfixed32_val_),
  PROTOBUF_FIELD_OFFSET(::Packed, float_val_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::Singular)},
  { 37, -1, sizeof(::Packed)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Singular_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Packed_default_instance_),
};

const char descriptor_table_protodef_reference_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017reference.proto\"\317\002\n\010Singular\022\021\n\tint32_"
  "val\030\001 \001(\005\022\021\n\tint64_val\030\002 \001(\003\022\022\n\nuint32_v"
  "al\030\003 \001(\r\022\022\n\nuint64_val\030\004 \001(\004\022\022\n\nsint32_v"
  "al\030\005 \001(\021\022\022\n\nsint64_val\030\006 \001(\022\022\020\n\010bool_val"
  "\030\007 \001(\010\022\027\n\010enum_val\030\010 \001(\0162\005.Enum\022\023\n\013fixed"
  "64_val\030\t \001(\006\022\024\n\014sfixed64_val\030\n \001(\020\022\022\n\ndo"
  "uble_val\030\013 \001(\001\022\022\n\nstring_val\030\014 \001(\t\022\021\n\tby"
  "tes_val\030\r \001(\014\022\023\n\013fixed32_val\030\016 \001(\007\022\024\n\014sf"
  "ixed32_val\030\017 \001(\017\022\021\n\tfloat_val\030\020 \001(\002\"\205\003\n\006"
  "Packed\022\025\n\tint32_val\030\001 \003(\005B\002\020\001\022\025\n\tint64_v"
  "al\030\002 \003(\003B\002\020\001\022\026\n\nuint32_val\030\003 \003(\rB\002\020\001\022\026\n\n"
  "uint64_val\030\004 \003(\004B\002\020\001\022\026\n\nsint32_val\030\005 \003(\021"
  "B\002\020\001\022\026\n\nsint64_val\030\006 \003(\022B\002\020\001\022\024\n\010bool_val"
  "\030\007 \003(\010B\002\020\001\022\033\n\010enum_val\030\010 \003(\0162\005.EnumB\002\020\001\022"
  "\027\n\013fixed64_val\030\t \003(\006B\002\020\001\022\030\n\014sfixed64_val"
  "\030\n \003(\020B\002\020\001\022\026\n\ndouble_val\030\013 \003(\001B\002\020\001\022\022\n\nst"
  "ring_val\030\014 \003(\t\022\021\n\tbytes_val\030\r \003(\014\022\027\n\013fix"
  "ed32_val\030\016 \003(\007B\002\020\001\022\030\n\014sfixed32_val\030\017 \003(\017"
  "B\002\020\001\022\025\n\tfloat_val\030\020 \003(\002B\002\020\001*Y\n\004Enum\022\026\n\tM"
  "INUS_ONE\020\377\377\377\377\377\377\377\377\377\001\022\010\n\004ZERO\020\000\022\007\n\003ONE\020\001\022\007"
  "\n\003TWO\020\002\022\t\n\005THREE\020\003\022\010\n\004FOUR\020\004\022\010\n\004FIVE\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_reference_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_reference_2eproto_sccs[2] = {
  &scc_info_Packed_reference_2eproto.base,
  &scc_info_Singular_reference_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_reference_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_reference_2eproto = {
  false, false, descriptor_table_protodef_reference_2eproto, "reference.proto", 838,
  &descriptor_table_reference_2eproto_once, descriptor_table_reference_2eproto_sccs, descriptor_table_reference_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_reference_2eproto::offsets,
  file_level_metadata_reference_2eproto, 2, file_level_enum_descriptors_reference_2eproto, file_level_service_descriptors_reference_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_reference_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_reference_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_reference_2eproto);
  return file_level_enum_descriptors_reference_2eproto[0];
}
bool Enum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Singular::InitAsDefaultInstance() {
}
class Singular::_Internal {
 public:
  using HasBits = decltype(std::declval<Singular>()._has_bits_);
  static void set_has_int32_val(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int64_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uint32_val(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uint64_val(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sint32_val(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sint64_val(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bool_val(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_enum_val(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_fixed64_val(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sfixed64_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_double_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_string_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fixed32_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sfixed32_val(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_float_val(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Singular::Singular(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Singular)
}
Singular::Singular(const Singular& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_val()) {
    string_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_string_val(),
      GetArena());
  }
  bytes_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bytes_val()) {
    bytes_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bytes_val(),
      GetArena());
  }
  ::memcpy(&int64_val_, &from.int64_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&enum_val_) -
    reinterpret_cast<char*>(&int64_val_)) + sizeof(enum_val_));
  // @@protoc_insertion_point(copy_constructor:Singular)
}

void Singular::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Singular_reference_2eproto.base);
  string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&int64_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float_val_) -
      reinterpret_cast<char*>(&int64_val_)) + sizeof(float_val_));
  enum_val_ = -1;
}

Singular::~Singular() {
  // @@protoc_insertion_point(destructor:Singular)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Singular::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Singular::ArenaDtor(void* object) {
  Singular* _this = reinterpret_cast< Singular* >(object);
  (void)_this;
}
void Singular::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Singular::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Singular& Singular::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Singular_reference_2eproto.base);
  return *internal_default_instance();
}


void Singular::Clear() {
// @@protoc_insertion_point(message_clear_start:Singular)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      string_val_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_val_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&int64_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sint32_val_) -
        reinterpret_cast<char*>(&int64_val_)) + sizeof(sint32_val_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bool_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&float_val_) -
        reinterpret_cast<char*>(&bool_val_)) + sizeof(float_val_));
    enum_val_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Singular::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 int32_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_int32_val(&has_bits);
          int32_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int64_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_int64_val(&has_bits);
          int64_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uint32_val(&has_bits);
          uint32_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uint64_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uint64_val(&has_bits);
          uint64_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 sint32_val = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sint32_val(&has_bits);
          sint32_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 sint64_val = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sint64_val(&has_bits);
          sint64_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bool_val = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bool_val(&has_bits);
          bool_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Enum enum_val = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Enum_IsValid(val))) {
            _internal_set_enum_val(static_cast<::Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 fixed64_val = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_fixed64_val(&has_bits);
          fixed64_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 sfixed64_val = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_sfixed64_val(&has_bits);
          sfixed64_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional double double_val = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_double_val(&has_bits);
          double_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string string_val = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_string_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Singular.string_val");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bytes_val = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_bytes_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 fixed32_val = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_fixed32_val(&has_bits);
          fixed32_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 sfixed32_val = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_sfixed32_val(&has_bits);
          sfixed32_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional float float_val = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_float_val(&has_bits);
          float_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Singular::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Singular)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 int32_val = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_int32_val(), target);
  }

  // optional int64 int64_val = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_int64_val(), target);
  }

  // optional uint32 uint32_val = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uint32_val(), target);
  }

  // optional uint64 uint64_val = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_uint64_val(), target);
  }

  // optional sint32 sint32_val = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_sint32_val(), target);
  }

  // optional sint64 sint64_val = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_sint64_val(), target);
  }

  // optional bool bool_val = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_bool_val(), target);
  }

  // optional .Enum enum_val = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_enum_val(), target);
  }

  // optional fixed64 fixed64_val = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(9, this->_internal_fixed64_val(), target);
  }

  // optional sfixed64 sfixed64_val = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_sfixed64_val(), target);
  }

  // optional double double_val = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_double_val(), target);
  }

  // optional string string_val = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_val().data(), static_cast<int>(this->_internal_string_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Singular.string_val");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_string_val(), target);
  }

  // optional bytes bytes_val = 13;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_bytes_val(), target);
  }

  // optional fixed32 fixed32_val = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(14, this->_internal_fixed32_val(), target);
  }

  // optional sfixed32 sfixed32_val = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(15, this->_internal_sfixed32_val(), target);
  }

  // optional float float_val = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_float_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Singular)
  return target;
}

size_t Singular::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Singular)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string_val = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_val());
    }

    // optional bytes bytes_val = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_val());
    }

    // optional int64 int64_val = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64_val());
    }

    // optional int32 int32_val = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32_val());
    }

    // optional uint32 uint32_val = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_val());
    }

    // optional uint64 uint64_val = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64_val());
    }

    // optional sint64 sint64_val = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_sint64_val());
    }

    // optional sint32 sint32_val = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_sint32_val());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool bool_val = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional fixed64 fixed64_val = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 sfixed64_val = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double double_val = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional fixed32 fixed32_val = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional sfixed32 sfixed32_val = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float float_val = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional .Enum enum_val = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Singular::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Singular)
  GOOGLE_DCHECK_NE(&from, this);
  const Singular* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Singular>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Singular)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Singular)
    MergeFrom(*source);
  }
}

void Singular::MergeFrom(const Singular& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Singular)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_val(from._internal_string_val());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bytes_val(from._internal_bytes_val());
    }
    if (cached_has_bits & 0x00000004u) {
      int64_val_ = from.int64_val_;
    }
    if (cached_has_bits & 0x00000008u) {
      int32_val_ = from.int32_val_;
    }
    if (cached_has_bits & 0x00000010u) {
      uint32_val_ = from.uint32_val_;
    }
    if (cached_has_bits & 0x00000020u) {
      uint64_val_ = from.uint64_val_;
    }
    if (cached_has_bits & 0x00000040u) {
      sint64_val_ = from.sint64_val_;
    }
    if (cached_has_bits & 0x00000080u) {
      sint32_val_ = from.sint32_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bool_val_ = from.bool_val_;
    }
    if (cached_has_bits & 0x00000200u) {
      fixed64_val_ = from.fixed64_val_;
    }
    if (cached_has_bits & 0x00000400u) {
      sfixed64_val_ = from.sfixed64_val_;
    }
    if (cached_has_bits & 0x00000800u) {
      double_val_ = from.double_val_;
    }
    if (cached_has_bits & 0x00001000u) {
      fixed32_val_ = from.fixed32_val_;
    }
    if (cached_has_bits & 0x00002000u) {
      sfixed32_val_ = from.sfixed32_val_;
    }
    if (cached_has_bits & 0x00004000u) {
      float_val_ = from.float_val_;
    }
    if (cached_has_bits & 0x00008000u) {
      enum_val_ = from.enum_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Singular::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Singular)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Singular::CopyFrom(const Singular& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Singular)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Singular::IsInitialized() const {
  return true;
}

void Singular::InternalSwap(Singular* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_val_.Swap(&other->string_val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bytes_val_.Swap(&other->bytes_val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Singular, float_val_)
      + sizeof(Singular::float_val_)
      - PROTOBUF_FIELD_OFFSET(Singular, int64_val_)>(
          reinterpret_cast<char*>(&int64_val_),
          reinterpret_cast<char*>(&other->int64_val_));
  swap(enum_val_, other->enum_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Singular::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Packed::InitAsDefaultInstance() {
}
class Packed::_Internal {
 public:
};

Packed::Packed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  int32_val_(arena),
  int64_val_(arena),
  uint32_val_(arena),
  uint64_val_(arena),
  sint32_val_(arena),
  sint64_val_(arena),
  bool_val_(arena),
  enum_val_(arena),
  fixed64_val_(arena),
  sfixed64_val_(arena),
  double_val_(arena),
  string_val_(arena),
  bytes_val_(arena),
  fixed32_val_(arena),
  sfixed32_val_(arena),
  float_val_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Packed)
}
Packed::Packed(const Packed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      int32_val_(from.int32_val_),
      int64_val_(from.int64_val_),
      uint32_val_(from.uint32_val_),
      uint64_val_(from.uint64_val_),
      sint32_val_(from.sint32_val_),
      sint64_val_(from.sint64_val_),
      bool_val_(from.bool_val_),
      enum_val_(from.enum_val_),
      fixed64_val_(from.fixed64_val_),
      sfixed64_val_(from.sfixed64_val_),
      double_val_(from.double_val_),
      string_val_(from.string_val_),
      bytes_val_(from.bytes_val_),
      fixed32_val_(from.fixed32_val_),
      sfixed32_val_(from.sfixed32_val_),
      float_val_(from.float_val_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Packed)
}

void Packed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Packed_reference_2eproto.base);
}

Packed::~Packed() {
  // @@protoc_insertion_point(destructor:Packed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Packed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Packed::ArenaDtor(void* object) {
  Packed* _this = reinterpret_cast< Packed* >(object);
  (void)_this;
}
void Packed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Packed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Packed& Packed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Packed_reference_2eproto.base);
  return *internal_default_instance();
}


void Packed::Clear() {
// @@protoc_insertion_point(message_clear_start:Packed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int32_val_.Clear();
  int64_val_.Clear();
  uint32_val_.Clear();
  uint64_val_.Clear();
  sint32_val_.Clear();
  sint64_val_.Clear();
  bool_val_.Clear();
  enum_val_.Clear();
  fixed64_val_.Clear();
  sfixed64_val_.Clear();
  double_val_.Clear();
  string_val_.Clear();
  bytes_val_.Clear();
  fixed32_val_.Clear();
  sfixed32_val_.Clear();
  float_val_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 int32_val = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_int32_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64_val = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_int64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 uint32_val = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uint32_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_uint32_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 uint64_val = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_uint64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 sint32_val = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_sint32_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_sint32_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 sint64_val = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_sint64_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_sint64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool bool_val = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_bool_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Enum enum_val = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_enum_val(), ptr, ctx, ::Enum_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Enum_IsValid(val))) {
            _internal_add_enum_val(static_cast<::Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated fixed64 fixed64_val = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_fixed64_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73) {
          _internal_add_fixed64_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 sfixed64_val = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_sfixed64_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81) {
          _internal_add_sfixed64_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated double double_val = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89) {
          _internal_add_double_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string string_val = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_val();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Packed.string_val");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes bytes_val = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bytes_val();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated fixed32 fixed32_val = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_fixed32_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117) {
          _internal_add_fixed32_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 sfixed32_val = 15 [packed = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_sfixed32_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125) {
          _internal_add_sfixed32_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated float float_val = 16 [packed = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133) {
          _internal_add_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Packed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Packed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 int32_val = 1 [packed = true];
  {
    int byte_size = _int32_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_int32_val(), byte_size, target);
    }
  }

  // repeated int64 int64_val = 2 [packed = true];
  {
    int byte_size = _int64_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_int64_val(), byte_size, target);
    }
  }

  // repeated uint32 uint32_val = 3 [packed = true];
  {
    int byte_size = _uint32_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_uint32_val(), byte_size, target);
    }
  }

  // repeated uint64 uint64_val = 4 [packed = true];
  {
    int byte_size = _uint64_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_uint64_val(), byte_size, target);
    }
  }

  // repeated sint32 sint32_val = 5 [packed = true];
  {
    int byte_size = _sint32_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          5, _internal_sint32_val(), byte_size, target);
    }
  }

  // repeated sint64 sint64_val = 6 [packed = true];
  {
    int byte_size = _sint64_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          6, _internal_sint64_val(), byte_size, target);
    }
  }

  // repeated bool bool_val = 7 [packed = true];
  if (this->_internal_bool_val_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_bool_val(), target);
  }

  // repeated .Enum enum_val = 8 [packed = true];
  {
    int byte_size = _enum_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          8, enum_val_, byte_size, target);
    }
  }

  // repeated fixed64 fixed64_val = 9 [packed = true];
  if (this->_internal_fixed64_val_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_fixed64_val(), target);
  }

  // repeated sfixed64 sfixed64_val = 10 [packed = true];
  if (this->_internal_sfixed64_val_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_sfixed64_val(), target);
  }

  // repeated double double_val = 11 [packed = true];
  if (this->_internal_double_val_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_double_val(), target);
  }

  // repeated string string_val = 12;
  for (int i = 0, n = this->_internal_string_val_size(); i < n; i++) {
    const auto& s = this->_internal_string_val(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Packed.string_val");
    target = stream->WriteString(12, s, target);
  }

  // repeated bytes bytes_val = 13;
  for (int i = 0, n = this->_internal_bytes_val_size(); i < n; i++) {
    const auto& s = this->_internal_bytes_val(i);
    target = stream->WriteBytes(13, s, target);
  }

  // repeated fixed32 fixed32_val = 14 [packed = true];
  if (this->_internal_fixed32_val_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_fixed32_val(), target);
  }

  // repeated sfixed32 sfixed32_val = 15 [packed = true];
  if (this->_internal_sfixed32_val_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_sfixed32_val(), target);
  }

  // repeated float float_val = 16 [packed = true];
  if (this->_internal_float_val_size() > 0) {
    target = stream->WriteFixedPacked(16, _internal_float_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Packed)
  return target;
}

size_t Packed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Packed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 int32_val = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int32_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64_val = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 uint32_val = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->uint32_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint32_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 uint64_val = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->uint64_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint64_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 sint32_val = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->sint32_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sint32_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 sint64_val = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->sint64_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sint64_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool bool_val = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool_val_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bool_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Enum enum_val = 8 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enum_val_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_enum_val(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _enum_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 fixed64_val = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed64_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fixed64_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 sfixed64_val = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed64_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sfixed64_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double double_val = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _double_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string string_val = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_val_.size());
  for (int i = 0, n = string_val_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_val_.Get(i));
  }

  // repeated bytes bytes_val = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bytes_val_.size());
  for (int i = 0, n = bytes_val_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bytes_val_.Get(i));
  }

  // repeated fixed32 fixed32_val = 14 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed32_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fixed32_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 sfixed32_val = 15 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed32_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sfixed32_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float float_val = 16 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _float_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Packed)
  GOOGLE_DCHECK_NE(&from, this);
  const Packed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Packed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Packed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Packed)
    MergeFrom(*source);
  }
}

void Packed::MergeFrom(const Packed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Packed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  int32_val_.MergeFrom(from.int32_val_);
  int64_val_.MergeFrom(from.int64_val_);
  uint32_val_.MergeFrom(from.uint32_val_);
  uint64_val_.MergeFrom(from.uint64_val_);
  sint32_val_.MergeFrom(from.sint32_val_);
  sint64_val_.MergeFrom(from.sint64_val_);
  bool_val_.MergeFrom(from.bool_val_);
  enum_val_.MergeFrom(from.enum_val_);
  fixed64_val_.MergeFrom(from.fixed64_val_);
  sfixed64_val_.MergeFrom(from.sfixed64_val_);
  double_val_.MergeFrom(from.double_val_);
  string_val_.MergeFrom(from.string_val_);
  bytes_val_.MergeFrom(from.bytes_val_);
  fixed32_val_.MergeFrom(from.fixed32_val_);
  sfixed32_val_.MergeFrom(from.sfixed32_val_);
  float_val_.MergeFrom(from.float_val_);
}

void Packed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Packed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packed::CopyFrom(const Packed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Packed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packed::IsInitialized() const {
  return true;
}

void Packed::InternalSwap(Packed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  int32_val_.InternalSwap(&other->int32_val_);
  int64_val_.InternalSwap(&other->int64_val_);
  uint32_val_.InternalSwap(&other->uint32_val_);
  uint64_val_.InternalSwap(&other->uint64_val_);
  sint32_val_.InternalSwap(&other->sint32_val_);
  sint64_val_.InternalSwap(&other->sint64_val_);
  bool_val_.InternalSwap(&other->bool_val_);
  enum_val_.InternalSwap(&other->enum_val_);
  fixed64_val_.InternalSwap(&other->fixed64_val_);
  sfixed64_val_.InternalSwap(&other->sfixed64_val_);
  double_val_.InternalSwap(&other->double_val_);
  string_val_.InternalSwap(&other->string_val_);
  bytes_val_.InternalSwap(&other->bytes_val_);
  fixed32_val_.InternalSwap(&other->fixed32_val_);
  sfixed32_val_.InternalSwap(&other->sfixed32_val_);
  float_val_.InternalSwap(&other->float_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packed::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Singular* Arena::CreateMaybeMessage< ::Singular >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Singular >(arena);
}
template<> PROTOBUF_NOINLINE ::Packed* Arena::CreateMaybeMessage< ::Packed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Packed >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
